generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  password  String
  name      String
  projects  Project[]
  activity  ActivityLog[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  tasks     Task[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  tasks       Task[]
  activity    ActivityLog[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Task {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      TaskStatus    @default(TODO)
  priority    TaskPriority  @default(MEDIUM)
  dueDate     DateTime?
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  assignee    User?         @relation(fields: [assigneeId], references: [id])
  assigneeId  String?
  activity    ActivityLog[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ActivityLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?
  action    String
  message   String?
  createdAt DateTime @default(now())
}
